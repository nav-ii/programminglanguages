
R version 4.3.1 (2023-06-16) -- "Beagle Scouts"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin20 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[R.app GUI 1.79 (8238) x86_64-apple-darwin20]

[Workspace restored from /Users/naviiamaratunga/.RData]
[History restored from /Users/naviiamaratunga/.Rapp.history]

> 
> # Load libraries
> # .... YOUR CODE FOR TASK 1 ....
> # .... YOUR CODE FOR TASK 1 ....
> library(readr)
> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> 
> # Load dataset
> by_tag_year <- read_csv("/Users/naviiamaratunga/Documents/programminglanguages/by_tag_year.csv")
Rows: 40518 Columns: 4                                                                                                            
── Column specification ───────────────────────────────────────────────────────────────────────
Delimiter: ","
chr (1): tag
dbl (3): year, number, year_total

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
> 
> # Inspect the dataset
> # .... YOUR CODE FOR TASK 1 ....
> print(by_tag_year)
# A tibble: 40,518 × 4
    year tag           number year_total
   <dbl> <chr>          <dbl>      <dbl>
 1  2008 .htaccess         54      58390
 2  2008 .net            5910      58390
 3  2008 .net-2.0         289      58390
 4  2008 .net-3.5         319      58390
 5  2008 .net-4.0           6      58390
 6  2008 .net-assembly      3      58390
 7  2008 .net-core          1      58390
 8  2008 2d                42      58390
 9  2008 32-bit            19      58390
10  2008 32bit-64bit        4      58390
# ℹ 40,508 more rows
# ℹ Use `print(n = ...)` to see more rows
> 
> # These packages need to be loaded in the first `@tests` cell. 
> library(testthat) 
Error in library(testthat) : there is no package called ‘testthat’
> library(IRkernel.testthat)
Error in library(IRkernel.testthat) : 
  there is no package called ‘IRkernel.testthat’
> 
> # Then follows one or more tests of the students code. 
> # The @solution should pass the tests.
> # The purpose of the tests is to try to catch common errors and to 
> # give the student a hint on how to resolve these errors.
> run_tests({
+     test_that("the answer is correct", {
+     expect_true("readr" %in% .packages(), info = "Did you load the readr package?")
+     expect_true("dplyr" %in% .packages(), info = "Did you load the dplyr package?")
+     expect_is(by_tag_year, "tbl_df", 
+         info = "Did you read in by_tag_year with read_csv (not read.csv)?")
+     expect_equal(nrow(by_tag_year), 40518, 
+         info = "Did you read in by_tag_year with read_csv?")
+     })
+ })
Error in run_tests({ : could not find function "run_tests"
> 
> 
> # Add fraction column
> by_tag_year_fraction <- by_tag_year %>%mutate(fraction=number/year_total)
> 
> # Print the new table
> # .... YOUR CODE FOR TASK 2 ....
> print(by_tag_year_fraction)
# A tibble: 40,518 × 5
    year tag           number year_total  fraction
   <dbl> <chr>          <dbl>      <dbl>     <dbl>
 1  2008 .htaccess         54      58390 0.000925 
 2  2008 .net            5910      58390 0.101    
 3  2008 .net-2.0         289      58390 0.00495  
 4  2008 .net-3.5         319      58390 0.00546  
 5  2008 .net-4.0           6      58390 0.000103 
 6  2008 .net-assembly      3      58390 0.0000514
 7  2008 .net-core          1      58390 0.0000171
 8  2008 2d                42      58390 0.000719 
 9  2008 32-bit            19      58390 0.000325 
10  2008 32bit-64bit        4      58390 0.0000685
# ℹ 40,508 more rows
# ℹ Use `print(n = ...)` to see more rows
> 
> # one or more tests of the students code. 
> # The @solution should pass the tests.
> # The purpose of the tests is to try to catch common errors and to 
> # give the student a hint on how to resolve these errors.
> run_tests({
+     test_that("the answer is correct", {
+     expect_is(by_tag_year_fraction, "tbl_df", 
+         info = "Did you create the by_tag_year_fraction object?")
+     expect_true("fraction" %in% colnames(by_tag_year_fraction), 
+         info = "Did you use mutate() to add a fraction column?")
+     expect_equal(by_tag_year_fraction$fraction,
+                  by_tag_year_fraction$number / by_tag_year_fraction$year_total,
+         info = "Check how you computed the fraction column: is it the number divided by that year's total?")
+     })
+     # You can have more than one test
+ })
Error in run_tests({ : could not find function "run_tests"
> 
> # Filter for R tags
> r_over_time <- by_tag_year_fraction %>%filter(tag=="r")
> 
> # Print the new table
> # .... YOUR CODE FOR TASK 3 ....
> print(r_over_time)
# A tibble: 11 × 5
    year tag   number year_total fraction
   <dbl> <chr>  <dbl>      <dbl>    <dbl>
 1  2008 r          8      58390 0.000137
 2  2009 r        524     343868 0.00152 
 3  2010 r       2270     694391 0.00327 
 4  2011 r       5845    1200551 0.00487 
 5  2012 r      12221    1645404 0.00743 
 6  2013 r      22329    2060473 0.0108  
 7  2014 r      31011    2164701 0.0143  
 8  2015 r      40844    2219527 0.0184  
 9  2016 r      44611    2226072 0.0200  
10  2017 r      54415    2305207 0.0236  
11  2018 r      28938    1085170 0.0267  
> 
> # one or more tests of the students code. 
> # The @solution should pass the tests.
> # The purpose of the tests is to try to catch common errors and to 
> # give the student a hint on how to resolve these errors.
> run_tests({
+     test_that("the answer is correct", {
+     expect_is(r_over_time, "tbl_df",
+         info = "Did you create an r_over_time object with filter()?")
+     expect_equal(nrow(r_over_time), 11,
+         info = "Did you filter just for the rows with the 'r' tag?")
+     expect_true(all(r_over_time$tag == "r"),
+         info = "Did you filter just for the rows with the 'r' tag?")
+     })
+     # You can have more than one test
+ })
Error in run_tests({ : could not find function "run_tests"
> 
> # Load ggplot2
> # .... YOUR CODE FOR TASK 4 ....
> library(ggplot2)
Warning message:
package ‘ggplot2’ was built under R version 4.3.2 
> 
> # Create a line plot of fraction over time
> # .... YOUR CODE FOR TASK 4 ....
> ggplot(r_over_time, aes(x=year, y=fraction))+ geom_line()
> 
> # one or more tests of the students code. 
> # The @solution should pass the tests.
> # The purpose of the tests is to try to catch common errors and to 
> # give the student a hint on how to resolve these errors.
> 
> get_aesthetics <- function(p) {
+     unlist(c(list(p$mapping), purrr::map(p$layers, "mapping")))
+ }
> 
> run_tests({
+     test_that("the answer is correct", {
+         expect_true("ggplot2" %in% .packages(), info = "Did you load the ggplot2 package?")
+         # expect_true("scales" %in% .packages(), info = "Did you load the scales package?")
+ 
+         p <- last_plot()
+         expect_is(p, "ggplot", info = "Did you create a ggplot figure?")
+         expect_equal(length(p$layers), 1, info = "Did you create a plot with geom_line()?")
+         expect_is(p$layers[[1]]$geom, "GeomLine", info = "Did you create a plot with geom_line()?")
+ 
+         aesthetics <- get_aesthetics(p)
+         expect_equal(rlang::quo_name(aesthetics$x), "year",
+                      info = "Did you put year on the x-axis?")
+         expect_equal(rlang::quo_name(aesthetics$y), "fraction",
+                      info = "Did you put fraction on the y-axis?")
+         
+         # expect_equal(length(p$scales$scales), 1, info = "Did you add scale_y_continuous?")    
+         # expect_equal(p$scales$scales[[1]]$labels(.03), "3.00%", info = "Did you make the y-axis a percentage?")
+     })
+ })
Error in run_tests({ : could not find function "run_tests"
> 
> # A vector of selected tags
> selected_tags <- c("r", "dplyr","ggplot2")
> 
> # Filter for those tags
> selected_tags_over_time <- by_tag_year_fraction %>% filter ( tag %in% selected_tags )
> 
> # Plot tags over time on a line plot using color to represent tag
> # .... YOUR CODE FOR TASK 5 ....
> ggplot(selected_tags_over_time, aes(x=year, y=fraction, color=tag))+geom_line()
> 
> # one or more tests of the students code. 
> # The @solution should pass the tests.
> # The purpose of the tests is to try to catch common errors and to 
> # give the student a hint on how to resolve these errors.
> 
> get_aesthetics <- function(p) {
+     unlist(c(list(p$mapping), purrr::map(p$layers, "mapping")))
+ }
> 
> run_tests({
+     test_that("the answer is correct", {
+         expect_true("ggplot2" %in% .packages(), info = "Did you load the ggplot2 package?")
+         
+         expect_is(selected_tags_over_time, "tbl_df",
+                  info = "Did you create a selected_tags_over_time data frame?")
+ 
+         expect_equal(nrow(selected_tags_over_time), 28,
+                  info = "Did you filter for r, dplyr, and ggplot2 and save it to selected_tags_over_time?")
+ 
+         expect_equal(sort(unique(selected_tags_over_time$tag)), c("dplyr", "ggplot2", "r"),
+                  info = "Did you filter for r, dplyr, and ggplot2 and save it to selected_tags_over_time?")
+ 
+         p <- last_plot()
+         aesthetics <- get_aesthetics(p)
+         expect_is(p, "ggplot", info = "Did you create a ggplot figure?")
+         expect_equal(p$data, selected_tags_over_time, info = "Did you create your plot out of selected_tags_over_time?")
+         
+         expect_equal(length(p$layers), 1, info = "Did you create a plot with geom_line()?")
+         expect_is(p$layers[[1]]$geom, "GeomLine", info = "Did you create a plot with geom_line()?")
+ 
+         expect_true(!is.null(aesthetics$x), info = "Did you put year on the x-axis?")
+         expect_equal(rlang::quo_name(aesthetics$x), "year",
+                      info = "Did you put year on the x-axis?")
+ 
+         expect_true(!is.null(aesthetics$y), info = "Did you put fraction on the y-axis?")
+         expect_equal(rlang::quo_name(aesthetics$y), "fraction",
+                      info = "Did you put fraction on the y-axis?")
+ 
+         expect_true(!is.null(aesthetics$colour), info = "Did you put color on the x-axis?")
+         expect_equal(rlang::quo_name(aesthetics$colour), "tag",
+                      info = "Did you map the tag to the color?")
+ 
+         # expect_equal(length(p$scales$scales), 1, info = "Did you add scale_y_continuous?")    
+         # expect_equal(p$scales$scales[[1]]$labels(.03), "3.00%", info = "Did you make the y-axis a percentage?")
+     })
+     # You can have more than one test
+ })
Error in run_tests({ : could not find function "run_tests"
> 
> # Find total number of questions for each tag
> # .... YOUR CODE FOR TASK 6 ....
> sorted_tags <- by_tag_year %>% group_by(tag) %>% summarize(tag_total= sum(number)) %>% arrange(desc(tag_total))
> 
> # Print the new table
> # .... YOUR CODE FOR TASK 6
> print(sorted_tags)
# A tibble: 4,080 × 2
   tag        tag_total
   <chr>          <dbl>
 1 javascript   1632049
 2 java         1425961
 3 c#           1217450
 4 php          1204291
 5 android      1110261
 6 python        970768
 7 jquery        915159
 8 html          755341
 9 c++           574263
10 ios           566075
# ℹ 4,070 more rows
# ℹ Use `print(n = ...)` to see more rows
> 
> # one or more tests of the students code. 
> # The @solution should pass the tests.
> # The purpose of the tests is to try to catch common errors and to 
> # give the student a hint on how to resolve these errors.
> run_tests({
+     test_that("the answer is correct", {
+         expect_is(sorted_tags, "tbl_df",
+                  info = "Did you create a selected_tags_over_time data frame?")
+ 
+         expect_equal(colnames(sorted_tags), c("tag", "tag_total"),
+                  info = "Did you group by tag and summarize to create a tag_total column?")
+ 
+         expect_equal(nrow(sorted_tags), length(unique(by_tag_year$tag)),
+                  info = "Did you group by tag and summarize to create a tag_total column?")
+ 
+         expect_equal(sorted_tags$tag_total,
+                      sort(sorted_tags$tag_total, decreasing = TRUE),
+                      info = "Did you arrange in descending order of tag_total?")
+     })
+ })
Error in run_tests({ : could not find function "run_tests"
> 
> # Get the six largest tags
> highest_tags <- head(sorted_tags$tag)
> 
> # Filter for the six largest tags
> by_tag_subset <- by_tag_year_fraction %>% filter(tag %in% highest_tags)
> 
> # Plot tags over time on a line plot using color to represent tag
> # .... YOUR CODE FOR TASK 7 ....
> ggplot(by_tag_subset, aes(x=year,y=fraction,color=tag))+geom_line()
> 
> # one or more tests of the students code. 
> # The @solution should pass the tests.
> # The purpose of the tests is to try to catch common errors and to 
> # give the student a hint on how to resolve these errors.
> get_aesthetics <- function(p) {
+     unlist(c(list(p$mapping), purrr::map(p$layers, "mapping")))
+ }
> 
> run_tests({
+     test_that("the answer is correct", {
+         expect_equal(sort(unique(by_tag_subset$tag)), sort(head(sorted_tags$tag, 6)),
+                    info = "Did you filter by_tag_year_fraction for only the 6 most asked-about tags, and save it as by_tag_subset?")
+ 
+         expect_equal(colnames(by_tag_subset), colnames(by_tag_year_fraction),
+                    info = "Did you filter by_tag_year_fraction for only the 6 most asked-about tags, and save it as by_tag_subset?")
+ 
+         p <- last_plot()
+         expect_is(p, "ggplot", info = "Did you create a ggplot figure?")
+         expect_equal(p$data, by_tag_subset, info = "Did you create your plot out of by_tag_subset?")
+         
+         expect_equal(length(p$layers), 1, info = "Did you create a plot with geom_line()?")
+         expect_is(p$layers[[1]]$geom, "GeomLine", info = "Did you create a plot with geom_line()?")
+ 
+         aesthetics <- get_aesthetics(p)
+         expect_equal(rlang::quo_name(aesthetics$x), "year",
+                      info = "Did you put year on the x-axis?")
+         expect_equal(rlang::quo_name(aesthetics$y), "fraction",
+                      info = "Did you put fraction on the y-axis?")
+         expect_equal(rlang::quo_name(aesthetics$colour), "tag",
+                      info = "Did you map the tag to the color?")
+ 
+         # expect_equal(length(p$scales$scales), 1, info = "Did you add scale_y_continuous?")    
+         # expect_equal(p$scales$scales[[1]]$labels(.03), "3.00%", info = "Did you make the y-axis a percentage?")
+     })
+ })
Error in run_tests({ : could not find function "run_tests"
> 
> # Get tags of interest
> my_tags <- c("android", "ios", "windows-phone")
> 
> # Filter for those tags
> by_tag_subset <- by_tag_year_fraction %>% filter(tag %in% my_tags)
> 
> # Plot tags over time on a line plot using color to represent tag
> # .... YOUR CODE FOR TASK 8 ....
> ggplot(by_tag_subset, aes(x=year, y=fraction, color=tag))+geom_line()
> 
> # one or more tests of the students code. 
> # The @solution should pass the tests.
> # The purpose of the tests is to try to catch common errors and to 
> # give the student a hint on how to resolve these errors.
> get_aesthetics <- function(p) {
+     unlist(c(list(p$mapping), purrr::map(p$layers, "mapping")))
+ }
> 
> run_tests({
+     test_that("the answer is correct", {
+         expect_equal(sort(my_tags), c("android", "ios", "windows-phone"),
+                     info = "Did you create a vector my_tags of just android, ios, and windows-phone?")
+         
+         expect_equal(sort(unique(by_tag_subset$tag)), c("android", "ios", "windows-phone"),
+                    info = "Did you filter by_tag_year_fraction for only ios, android, and windows-phone?")
+ 
+         expect_equal(colnames(by_tag_subset), colnames(by_tag_year_fraction),
+                    info = "Did you filter by_tag_year_fraction for only the three requested tags, and save it as by_tag_subset?")
+ 
+         p <- last_plot()
+         expect_is(p, "ggplot", info = "Did you create a ggplot figure?")
+         expect_equal(p$data, by_tag_subset, info = "Did you create your plot out of by_tag_subset?")
+         
+         expect_equal(length(p$layers), 1, info = "Did you create a plot with geom_line()?")
+         expect_is(p$layers[[1]]$geom, "GeomLine", info = "Did you create a plot with geom_line()?")
+ 
+         aesthetics <- get_aesthetics(p)
+         expect_equal(rlang::quo_name(aesthetics$x), "year",
+                      info = "Did you put year on the x-axis?")
+         expect_equal(rlang::quo_name(aesthetics$y), "fraction",
+                      info = "Did you put fraction on the y-axis?")
+         expect_equal(rlang::quo_name(aesthetics$colour), "tag",
+                      info = "Did you map the tag to the color?")
+ 
+         # expect_equal(length(p$scales$scales), 1, info = "Did you add scale_y_continuous?")    
+         # expect_equal(p$scales$scales[[1]]$labels(.03), "3.00%", info = "Did you make the y-axis a percentage?")
+     })
+ })
Error in run_tests({ : could not find function "run_tests"
2024-09-14 14:08:40.134 R[2418:72215] +[CATransaction synchronize] called within transaction
> 